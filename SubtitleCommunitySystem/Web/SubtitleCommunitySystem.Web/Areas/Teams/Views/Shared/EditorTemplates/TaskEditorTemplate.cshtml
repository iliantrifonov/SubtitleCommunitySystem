@using SubtitleCommunitySystem.Model;

@model SubtitleCommunitySystem.Web.Areas.Teams.Models.TaskInputModel


@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.Id)
<div class="">

    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "col-md-3" })
    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "" } })
    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
</div>
<hr />
<div class="">

    @Html.LabelFor(model => model.PercentDone, htmlAttributes: new { @class = "col-md-3" })
    @Html.EditorFor(model => model.PercentDone, new { htmlAttributes = new { @class = "" } })
    @Html.ValidationMessageFor(model => model.PercentDone, "", new { @class = "text-danger" })
</div>
<hr />

<div class="">
    @Html.LabelFor(model => model.DateCreated, htmlAttributes: new { @class = "col-md-3" })

    @Html.EditorFor(model => model.DateCreated, new { htmlAttributes = new { @class = "" } })
    @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
</div>
<hr />

<div class="">

    @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "col-md-3" })
    @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "" } })
    @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
</div>
<hr />

<div class="">

    @Html.LabelFor(model => model.IsFinished, htmlAttributes: new { @class = "col-md-3" })
    @Html.EditorFor(model => model.IsFinished)
    @Html.ValidationMessageFor(model => model.IsFinished, "", new { @class = "text-danger" })
</div>
<hr />

<div>
    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-md-3" })
    @(Html.Kendo().DropDownListFor(m => m.Type)
            .BindTo(EnumHelper.GetSelectList(typeof(SubtitleTaskType))))
</div>

<div>
    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "col-md-3" })
    @(Html.Kendo().DropDownListFor(m => m.Type)
        .Name("Type")
            .BindTo(EnumHelper.GetSelectList(typeof(SubtitleTaskType))))
</div>


<script>
    function filterType() {
        return {
            typeId: $("#Type").val()
        };
    }
</script>

<div class="users">
    @(Html.Kendo().DropDownList()
              .Name("Users")
              .HtmlAttributes(new { style = "width:300px" })
              .DataTextField("UserName")
              .DataValueField("Id")
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetCascadeUsers", "Tasks")
                          .Data("filterType");
                  })
                  .ServerFiltering(true);
              })
              .Enable(false)
              .AutoBind(false)
              .CascadeFrom("Type"))
</div>


