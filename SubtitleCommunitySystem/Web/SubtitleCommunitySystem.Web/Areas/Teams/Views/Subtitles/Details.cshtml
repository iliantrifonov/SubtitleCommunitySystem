@using SubtitleCommunitySystem.Web.Infrastructure.Constants;

@model SubtitleDetailsModel

@{
    ViewBag.Title = "Details";

    string ControllerName = "Tasks";
}

@{
    var isTeamLeader = false;
    var roles = ViewBag.UserRoles as IEnumerable<string>;
    if (ViewBag.UserRoles != null)
    {
        if (roles.Contains(RoleConstants.TeamLeader))
        {
            isTeamLeader = true;
        }
    }
}

@section messages {
    @if (TempData["Error"] != null)
    {
        @Html.DisplayFor(c => TempData["Error"], "ErrorMessage")
    }
}

<h2>Subtitle Details</h2>
<div class="row">
    <img src="@Model.MovieMainPosterUrl" alt="@Model.MovieName" style="max-width:80px" />
</div>
<div class="row">
    <div class="row">
        <h2 class="col-md-3">
            Original Title:
        </h2>
        <h2 class="col-md-6">
            @Model.MovieName
        </h2>
    </div>
    <div class="row">
        <h4 class="col-md-3">
            Original Description:
        </h4>
        <h4 class="col-md-6">
            @Model.MovieDescription
        </h4>
    </div>
    <div class="row">
        <h4 class="col-md-2">
            Translated Title:
        </h4>
        <h4 class="col-md-6">
            @Model.Name
        </h4>
    </div>
    <div class="row">
        <div class="col-md-2">
            Translated Description:
        </div>
        <div class="col-md-6">
            @Model.Description
        </div>
    </div>
    <hr />
    <div class="row">
        @Ajax.ActionLink("Download description file for tasks", "DownloadSource", "File", new { id = Model.DescriptionFileId, area = "Private" }, new AjaxOptions() { HttpMethod = "POST", InsertionMode = InsertionMode.InsertAfter }, new { @class = "btn btn-success" })
    </div>
    <hr />
</div>
@if (isTeamLeader)
{
    <div class="row">
        <button class="btn btn-primary" onclick="toggleForm()">Toggle Edit Form</button>
    </div>
    <div class="row" id="update-form">
        @using (Html.BeginForm("Update", "Subtitles", new { id = Model.Id }, FormMethod.Post, new { enctype = "multipart/form-data", @class = "form" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.IsFinished, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.IsFinished, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsFinished, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label for="descriptionFile" class="control-label col-md-2">Upload Description File</label>
                <div class="col-md-10">
                    <input type="file" id="descriptionFile" name="descriptionFile" class="form-control" />
                </div>
            </div>

            <div class="form-group">
                <label for="subtitleFile" class="control-label col-md-2"><span class="text-success">Upload Subtitle File</span></label>
                <div class="col-md-10">
                    <input type="file" id="subtitleFile" name="subtitleFile" class="form-control" />
                </div>
            </div>


            @AppHelpers.Submit()
        }
    </div>

    <script>
        $("#update-form").hide();

        function toggleForm() {
            $("#update-form").toggle();
        }
    </script>
}

<hr />

@if (Model.IsFinished)
{
    if (Model.SubtitleFileId != null)
    {
        @Ajax.ActionLink("Download Subtitles", "DownloadSource", "File", new { id = Model.SubtitleFileId, area = "Private" }, new AjaxOptions() { HttpMethod = "POST", InsertionMode = InsertionMode.InsertAfter }, new { @class = "btn btn-success" })
    }
    else
    {
        <h2 class="text-danger">Subtitles for this movie are not uploaded, however it is mark as finished!</h2>
    }

}
@if (!Model.IsFinished)
{
    @(Html.Kendo()
            .Grid<TaskInputModel>()
            .Name("grid")
            .Columns(cols =>
            {
                cols.Bound(pr => pr.Type);
                cols.Bound(pr => pr.UserName);

                cols.Bound(pr => pr.Id).Hidden();
                cols.Bound(pr => pr.Description);
                cols.Bound(pr => pr.PercentDone).ClientTemplate(@"<div class='progress progress-striped active'>
                                                                    <div class='progress-bar progress-bar-info' style='width: #= PercentDone #%'></div>
                                                                </div>");
                
                cols.Bound(pr => pr.DateCreated).Format("{0:dd/MM/yyyy}");
                cols.Bound(pr => pr.DueDate).Format("{0:dd/MM/yyyy}");
                cols.Bound(pr => pr.IsFinished).ClientTemplate(@"
                                            #if(IsFinished){#
                                                <div class='text-center'>Yes</div>
                                            #}else{#
                                                <div class='text-center'>No</div>
                                            #}#
                                            #if(FileId){#
                                                <div class='text-center'><a class='btn btn-success btn-xs' href='/Private/File/DownloadSource/#= FileId #'>Download File</a></div>
                                            #}else{#
                                                <div></div>
                                            #}#");
                if (isTeamLeader)
                {
                    cols.Command(com => com.Edit());
                    cols.Command(com => com.Destroy());
                }
                cols.Bound(pr => pr.SubtitleId).Hidden();
            })
            .ColumnMenu()
            .Pageable(page => page.Refresh(true))
            .Sortable()
            .Groupable()
            .Filterable()
            .Editable(edit => edit.Mode(GridEditMode.PopUp).TemplateName("TaskEditorTemplate"))

            .ToolBar(toolbar => toolbar.Create().HtmlAttributes(new { style = (isTeamLeader ? "" : "display: none;") }))
            .DataSource(data =>
                data
                .Ajax()
                .Model(m =>
                {
                    m.Id(pr => pr.Id);
                    m.Field(pr => pr.Id).Editable(false);
                    m.Field(pr => pr.SubtitleId).Editable(false);
                })
                    .Read(read => read.Action("ReadTasks", ControllerName, new { subtitleId = Model.Id }))
                .Create(create => create.Action("Create", ControllerName, new { subId = Model.Id }))
                .Update(update => update.Action("Update", ControllerName, new { subId = Model.Id }))
                .Destroy(destroy => destroy.Action("Destroy", ControllerName))
            ))
}
