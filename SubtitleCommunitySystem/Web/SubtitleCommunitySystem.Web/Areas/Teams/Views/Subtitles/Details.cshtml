@using SubtitleCommunitySystem.Web.Infrastructure.Constants;

@model SubtitleDetailsModel

@{
    ViewBag.Title = "Details";

    string ControllerName = "Tasks";
}

<h2>Subtitle Details</h2>
<div class="row">
    <img src="@Model.MovieMainPosterUrl" alt="@Model.MovieName" style="max-width:80px" />
</div>
<div class="row">
    <div class="row">
        <div class="col-md-2">
            Original Title:
        </div>
        <div class="col-md-6">
            @Model.MovieName
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            Original Description:
        </div>
        <div class="col-md-6">
            @Model.MovieDescription
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            Translated Title:
        </div>
        <div class="col-md-6">
            @Model.Name
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            Translated Description:
        </div>
        <div class="col-md-6">
            @Model.Description
        </div>
    </div>
    <div class="row pull-right">
        <button class="btn btn-danger">Download description file for tasks (NA)</button>
    </div>
    @{
        var isTeamLeader = false;
        var roles = ViewBag.UserRoles as IEnumerable<string>;
        if (ViewBag.UserRoles != null)
        {
            if (roles.Contains(RoleConstants.TeamLeader))
            {
                isTeamLeader = true;
            }
        }
    }

</div>

@if (Model.IsFinished)
{
    <h2>Is Finished is a work in progress</h2>
    <div class="btn btn success">
        Download subtitles
    </div>
}
@if (!Model.IsFinished)
{
    @(Html.Kendo()
            .Grid<TaskInputModel>()
            .Name("grid")
            .Columns(cols =>
            {
                cols.Bound(pr => pr.Type);
                cols.Bound(pr => pr.UserName);
                
                cols.Bound(pr => pr.Id).Hidden();
                cols.Bound(pr => pr.Description);
                cols.Bound(pr => pr.PercentDone);
                cols.Bound(pr => pr.DateCreated).Format("{0:dd/MM/yyyy}");
                cols.Bound(pr => pr.DueDate).Format("{0:dd/MM/yyyy}");
                cols.Bound(pr => pr.IsFinished);
                if (isTeamLeader)
                {
                    cols.Command(com => com.Edit());
                    cols.Command(com => com.Destroy());
                }
                cols.Bound(pr => pr.SubtitleId).Hidden();
            })
            .ColumnMenu()
            .Pageable(page => page.Refresh(true))
            .Sortable()
            .Groupable()
            .Filterable()
            .Editable(edit => edit.Mode(GridEditMode.PopUp).TemplateName("TaskEditorTemplate"))
            .ToolBar(toolbar => toolbar.Create())
            .DataSource(data =>
                data
                .Ajax()
                .Model(m =>
                {
                    m.Id(pr => pr.Id);
                    m.Field(pr => pr.Id).Editable(false);
                    m.Field(pr => pr.SubtitleId).Editable(false);
                })
                .Read(read => read.Action("ReadTasks", ControllerName, new { subtitleId = ViewBag.Id }))
                .Create(create => create.Action("Create", ControllerName, new { subId = Model.Id }))
                .Update(update => update.Action("Update", ControllerName, new { subId = Model.Id }))
                .Destroy(destroy => destroy.Action("Destroy", ControllerName))
            ))
}
